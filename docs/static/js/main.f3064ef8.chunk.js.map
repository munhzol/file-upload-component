{"version":3,"sources":["FileUpload.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["FileUpload","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","upload","e","file","target","files","reader","FileReader","addEventListener","console","log","name","result","props","onUpload","readAsDataURL","inherits","createClass","key","value","react_default","a","createElement","type","onChange","style","marginTop","Component","App","newImg","setState","logo","state","className","src","alt","src_FileUpload","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAwBeA,SAtBf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MAEEQ,OAAS,SAACC,GACR,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACjBD,EAAOE,iBAAiB,OAAQ,WAC9BC,QAAQC,IAAIP,EAAKQ,MACjBF,QAAQC,IAAIJ,EAAOM,QACnB1B,EAAK2B,MAAMC,SAASR,EAAOM,UAC1B,GACCT,GACFG,EAAOS,cAAcZ,IAX3BjB,EAAA,OAAAC,OAAA6B,EAAA,EAAA7B,CAAAJ,EAAAC,GAAAG,OAAA8B,EAAA,EAAA9B,CAAAJ,EAAA,EAAAmC,IAAA,SAAAC,MAAA,WAgBI,OACEC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,SAAUnC,KAAKY,OAAQwB,MAAO,CAACC,UAAW,eAjBnE3C,EAAA,CAAgC4C,cC4BjBC,cAvBb,SAAAA,EAAYf,GAAO,IAAA3B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACjB1C,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAAyC,GAAA9B,KAAAT,KAAMwB,KAMRgB,OAAS,SAAC1B,GACRjB,EAAK4C,SAAS,CAACC,KAAM5B,KANrBjB,EAAK8C,MAAQ,CACXD,KAAMA,KAHS7C,wEAYjB,OACEkC,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,UAAQW,UAAU,cAChBb,EAAAC,EAAAC,cAAA,OAAKY,IAAK7C,KAAK2C,MAAMD,KAAME,UAAU,WAAWE,IAAI,SACpDf,EAAAC,EAAAC,cAACc,EAAD,CAAYtB,SAAUzB,KAAKwC,kBAlBnBF,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f3064ef8.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class FileUpload extends Component {\n\n  upload = (e) => {\n    let file = e.target.files[0];\n    let reader = new FileReader();\n    reader.addEventListener(\"load\", () => {\n      console.log(file.name);\n      console.log(reader.result);\n      this.props.onUpload(reader.result);\n    }, false);\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  }\n\n  render() {\n    return (\n      <input type=\"file\" onChange={this.upload} style={{marginTop: \"100px\"}} />\n    )\n  }\n}\n\nexport default FileUpload\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FileUpload from './FileUpload';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      logo: logo\n    }\n  }\n  \n  newImg = (file) => {\n    this.setState({logo: file});\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={this.state.logo} className=\"App-logo\" alt=\"logo\" />\n          <FileUpload onUpload={this.newImg} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}